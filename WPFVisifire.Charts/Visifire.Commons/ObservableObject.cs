using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using Visifire.Charts;

namespace Visifire.Commons
{
	public abstract class ObservableObject : VisifireElement, INotifyPropertyChanged
	{
		internal static bool _isPropertyChangedFired;

		internal bool _isAutoGenerated;

		public event PropertyChangedEventHandler PropertyChanged;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public VisifireControl Chart
		{
			get;
			set;
		}

		public override string ToolTipText
		{
			get
			{
				if (this.Chart != null && !string.IsNullOrEmpty((this.Chart as Chart).ToolTipText))
				{
					return null;
				}
				return (string)base.GetValue(VisifireElement.ToolTipTextProperty);
			}
			set
			{
				base.SetValue(VisifireElement.ToolTipTextProperty, value);
			}
		}

		internal bool IsDefault
		{
			get;
			set;
		}

		internal bool IsInDesignMode
		{
			get
			{
				return DesignerProperties.GetIsInDesignMode(this);
			}
		}

		private new string ToolTip
		{
			get;
			set;
		}

		internal bool IsNotificationEnable
		{
			get;
			set;
		}

		public ObservableObject()
		{
			this.AttachEventChanged();
			this.IsNotificationEnable = true;
			this.BindStyleAttribute();
		}

		internal virtual void AttachEventChanged()
		{
			base.EventChanged += delegate(object A_1, EventArgs A_2)
			{
				this.FirePropertyChanged(VcProperties.MouseEvent);
			};
		}

		internal virtual void BindStyleAttribute()
		{
		}

		public void ApplyStyleFromTheme(VisifireControl control, string keyName)
		{
			Chart chart = control as Chart;
			if (chart != null && !chart.ThemeEnabled)
			{
				return;
			}
			bool isNotificationEnable = this.IsNotificationEnable;
			this.IsNotificationEnable = false;
			if (chart.StyleDictionary != null)
			{
				Style style = chart.StyleDictionary[keyName] as Style;
				if (style != null)
				{
					if (chart._isThemeChanged)
					{
						base.Style = style;
					}
					else if (base.Style == null)
					{
						base.Style = style;
					}
				}
			}
			this.IsNotificationEnable = isNotificationEnable;
		}

		internal virtual void UpdateVisual(VcProperties propertyName, object value)
		{
		}

		protected bool CheckPropertyChanged<T>(VcProperties propertyName, ref T oldValue, ref T newValue)
		{
			if (oldValue == null && newValue == null)
			{
				return false;
			}
			if ((oldValue == null && newValue != null) || !oldValue.Equals(newValue))
			{
				oldValue = newValue;
				this.FirePropertyChanged(propertyName);
				return true;
			}
			return false;
		}

		internal virtual void Bind()
		{
		}

		public void FirePropertyChanged(VcProperties propertyName)
		{
			ObservableObject._isPropertyChangedFired = false;
			if (this.PropertyChanged != null && this.IsNotificationEnable)
			{
				if (this.Chart != null)
				{
					(this.Chart as Chart)._internalPartialUpdateEnabled = false;
				}
				if (this.Chart != null)
				{
					(this.Chart as Chart)._forcedRedraw = true;
					this.PropertyChanged(this, new PropertyChangedEventArgs(Enum.GetName(typeof(VcProperties), propertyName)));
				}
			}
		}

		internal static void RemoveElementFromElementTree(FrameworkElement obj)
		{
			if (obj.Parent != null)
			{
				Panel panel = obj.Parent as Panel;
				panel.Children.Remove(obj);
			}
		}

		internal static bool ValidatePartialUpdate(DataSeries dataSeries, VcProperties property)
		{
			RenderAs arg_06_0 = dataSeries.RenderAs;
			Chart chart = dataSeries.Chart as Chart;
			if (chart == null || chart.ChartArea == null || chart.ChartArea._isFirstTimeRender)
			{
				return chart != null && chart.RENDER_LOCK && chart.FULL_CHART_DRAW_ENDED && chart.ChartArea != null;
			}
			if ((chart.IsSamplingEnabled && property != VcProperties.ScrollBarScale) || (chart.PlotDetails != null && chart.PlotDetails.AutoFitToPlotArea && property != VcProperties.ScrollBarScale))
			{
				dataSeries.FirePropertyChanged(property);
				return false;
			}
			return true;
		}

		internal static bool NonPartialUpdateChartTypes(RenderAs renderAs)
		{
			if (renderAs != RenderAs.Pie && renderAs != RenderAs.Doughnut)
			{
				switch (renderAs)
				{
				case RenderAs.StackedArea:
				case RenderAs.StackedArea100:
				case RenderAs.StreamLineFunnel:
				case RenderAs.SectionFunnel:
				case RenderAs.Radar:
				case RenderAs.Polar:
				case RenderAs.Pyramid:
					return true;
				}
				return false;
			}
			return true;
		}

		internal static string GetFormattedMultilineText(string text)
		{
			if (string.IsNullOrEmpty(text))
			{
				return "";
			}
			string[] separator = new string[]
			{
				"\\n"
			};
			string[] array = text.Split(separator, StringSplitOptions.RemoveEmptyEntries);
			string text2 = "";
			string[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				string text3 = array2[i];
				if (text3.EndsWith("\\"))
				{
					text2 = text2 + text3 + "n";
				}
				else
				{
					text2 = text2 + text3 + "\n";
				}
			}
			if (text.EndsWith("\\n"))
			{
				return text2;
			}
			return text2.Substring(0, text2.Length - 1);
		}
	}
}
