using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using System.Windows.Shapes;
using Visifire.Commons;

namespace Visifire.Charts
{
	public class ToolTip : VisifireElement
	{
		public static readonly DependencyProperty InternalBackgroundProperty;

		public static readonly DependencyProperty InternalFontSizeProperty;

		public static readonly DependencyProperty EnabledProperty;

		public static readonly DependencyProperty TextProperty;

		public static readonly DependencyProperty CornerRadiusProperty;

		public static readonly DependencyProperty FontColorProperty;

		private double _oldFontSize;

		internal bool _isAutoGenerated;

		internal Border _borderElement;

		private TextBlock _toolTipTextBlock;

		internal Path _callOutPath;

		internal bool _isAutoGeneratedFontColor = true;

		private static bool _defaultStyleKeyApplied;

		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public VisifireControl Chart
		{
			get;
			set;
		}

		[TypeConverter(typeof(NullableBoolConverter))]
		public bool? Enabled
		{
			get
			{
				if (((bool?)base.GetValue(Visifire.Charts.ToolTip.EnabledProperty)).HasValue)
				{
					return (bool?)base.GetValue(Visifire.Charts.ToolTip.EnabledProperty);
				}
				if (this.Chart != null)
				{
					return new bool?(this.Chart.ToolTipEnabled);
				}
				return new bool?(true);
			}
			set
			{
				base.SetValue(Visifire.Charts.ToolTip.EnabledProperty, value);
			}
		}

		internal double InternalFontSize
		{
			get
			{
				return (double)base.GetValue(Visifire.Charts.ToolTip.InternalFontSizeProperty);
			}
			set
			{
				base.SetValue(Visifire.Charts.ToolTip.InternalFontSizeProperty, value);
			}
		}

		internal Brush InternalBackground
		{
			get
			{
				if (base.GetValue(Visifire.Charts.ToolTip.InternalBackgroundProperty) == null)
				{
					return Visifire.Charts.ToolTip.GetBackgroundBrush();
				}
				return (Brush)base.GetValue(Visifire.Charts.ToolTip.InternalBackgroundProperty);
			}
			set
			{
				base.SetValue(Visifire.Charts.ToolTip.InternalBackgroundProperty, value);
			}
		}

		public new Brush Background
		{
			get
			{
				return (Brush)base.GetValue(Control.BackgroundProperty);
			}
			set
			{
				base.SetValue(Control.BackgroundProperty, value);
			}
		}

		public string Text
		{
			get
			{
				if (base.GetValue(Visifire.Charts.ToolTip.TextProperty) != null)
				{
					return (string)base.GetValue(Visifire.Charts.ToolTip.TextProperty);
				}
				return "";
			}
			set
			{
				string formattedMultilineText = ObservableObject.GetFormattedMultilineText(value);
				base.SetValue(Visifire.Charts.ToolTip.TextProperty, formattedMultilineText);
			}
		}

		public CornerRadius CornerRadius
		{
			get
			{
				return (CornerRadius)base.GetValue(Visifire.Charts.ToolTip.CornerRadiusProperty);
			}
			set
			{
				base.SetValue(Visifire.Charts.ToolTip.CornerRadiusProperty, value);
			}
		}

		public Brush FontColor
		{
			get
			{
				return (Brush)base.GetValue(Visifire.Charts.ToolTip.FontColorProperty);
			}
			set
			{
				this._isAutoGeneratedFontColor = false;
				base.SetValue(Visifire.Charts.ToolTip.FontColorProperty, value);
			}
		}

		internal Point CallOutStartPoint
		{
			set
			{
				if (this._callOutPath != null)
				{
					(this._callOutPath.Data as PathGeometry).Figures[0].StartPoint = value;
				}
			}
		}

		internal Point CallOutMidPoint
		{
			set
			{
				if (this._callOutPath != null)
				{
					((this._callOutPath.Data as PathGeometry).Figures[0].Segments[0] as LineSegment).Point = value;
				}
			}
		}

		internal Point CallOutEndPoint
		{
			set
			{
				if (this._callOutPath != null)
				{
					((this._callOutPath.Data as PathGeometry).Figures[0].Segments[1] as LineSegment).Point = value;
				}
			}
		}

		internal Visibility CallOutVisiblity
		{
			get
			{
				if (this._callOutPath == null)
				{
					return Visibility.Collapsed;
				}
				return this._callOutPath.Visibility;
			}
			set
			{
				if (this._callOutPath != null)
				{
					this._callOutPath.Visibility = value;
				}
			}
		}

		public ToolTip()
		{
			this.Text = "";
		}

		static ToolTip()
		{
			Visifire.Charts.ToolTip.InternalBackgroundProperty = DependencyProperty.Register("InternalBackground", typeof(Brush), typeof(ToolTip), new PropertyMetadata(Visifire.Charts.ToolTip.GetBackgroundBrush(), new PropertyChangedCallback(Visifire.Charts.ToolTip.OnBackgroundPropertyChanged)));
			Visifire.Charts.ToolTip.InternalFontSizeProperty = DependencyProperty.Register("InternalFontSize", typeof(double), typeof(ToolTip), new PropertyMetadata(new PropertyChangedCallback(Visifire.Charts.ToolTip.OnFontSizePropertyChanged)));
			Visifire.Charts.ToolTip.EnabledProperty = DependencyProperty.Register("Enabled", typeof(bool?), typeof(ToolTip), new PropertyMetadata(new PropertyChangedCallback(Visifire.Charts.ToolTip.OnEnabledPropertyChanged)));
			Visifire.Charts.ToolTip.TextProperty = DependencyProperty.Register("Text", typeof(string), typeof(ToolTip), new PropertyMetadata(new PropertyChangedCallback(Visifire.Charts.ToolTip.OnTextPropertyChanged)));
			Visifire.Charts.ToolTip.CornerRadiusProperty = DependencyProperty.Register("CornerRadius", typeof(CornerRadius), typeof(ToolTip), null);
			Visifire.Charts.ToolTip.FontColorProperty = DependencyProperty.Register("FontColor", typeof(Brush), typeof(ToolTip), new PropertyMetadata(new SolidColorBrush(Color.FromArgb(255, 46, 45, 45)), new PropertyChangedCallback(Visifire.Charts.ToolTip.OnFontColorPropertyChanged)));
			if (!Visifire.Charts.ToolTip._defaultStyleKeyApplied)
			{
				FrameworkElement.DefaultStyleKeyProperty.OverrideMetadata(typeof(ToolTip), new FrameworkPropertyMetadata(typeof(ToolTip)));
				Visifire.Charts.ToolTip._defaultStyleKeyApplied = true;
			}
		}

		public override void OnApplyTemplate()
		{
			base.OnApplyTemplate();
			this._borderElement = (base.GetTemplateChild("ToolTipBorder") as Border);
			this._toolTipTextBlock = (base.GetTemplateChild("ToolTipTextBlock") as TextBlock);
			this._callOutPath = (base.GetTemplateChild("CallOut") as Path);
			this._oldFontSize = base.FontSize;
			Binding binding = new Binding("Background");
			binding.Source = this;
			base.SetBinding(Visifire.Charts.ToolTip.InternalBackgroundProperty, binding);
			Binding binding2 = new Binding("FontSize");
			binding2.Source = this;
			base.SetBinding(Visifire.Charts.ToolTip.InternalFontSizeProperty, binding2);
			if (this._borderElement != null)
			{
				this._borderElement.Background = this.InternalBackground;
			}
			if (this._toolTipTextBlock != null)
			{
				this._toolTipTextBlock.Foreground = this.FontColor;
			}
			base.Visibility = Visibility.Collapsed;
		}

		internal static Brush GetBackgroundBrush()
		{
			LinearGradientBrush linearGradientBrush = new LinearGradientBrush();
			linearGradientBrush.Opacity = 0.9;
			linearGradientBrush.StartPoint = new Point(0.5, 0.0);
			linearGradientBrush.EndPoint = new Point(0.5, 1.0);
			GradientStop gradientStop = new GradientStop();
			gradientStop.Color = Color.FromArgb(255, 200, 200, 196);
			gradientStop.Offset = 0.156;
			linearGradientBrush.GradientStops.Add(gradientStop);
			GradientStop gradientStop2 = new GradientStop();
			gradientStop2.Color = Color.FromArgb(240, 255, 255, 255);
			gradientStop2.Offset = 1.0;
			linearGradientBrush.GradientStops.Add(gradientStop2);
			return linearGradientBrush;
		}

		private static void OnBackgroundPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			ToolTip toolTip = d as ToolTip;
			if (toolTip._borderElement != null)
			{
				toolTip._borderElement.Background = (Brush)e.NewValue;
			}
			if (toolTip._callOutPath != null)
			{
				toolTip._callOutPath.Fill = (Brush)e.NewValue;
			}
		}

		private static void OnFontSizePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			ToolTip toolTip = d as ToolTip;
			if (toolTip._toolTipTextBlock != null && toolTip.Chart != null)
			{
				if (toolTip._oldFontSize != Convert.ToDouble(e.NewValue))
				{
					toolTip.Chart.OnToolTipFontSizePropertyValueChanged();
				}
				toolTip._oldFontSize = Convert.ToDouble(e.NewValue);
			}
		}

		private static void OnEnabledPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			ToolTip toolTip = d as ToolTip;
			if (toolTip._borderElement != null)
			{
				if ((bool)e.NewValue)
				{
					toolTip._borderElement.Visibility = toolTip.Visibility;
					return;
				}
				toolTip._borderElement.Visibility = Visibility.Collapsed;
			}
		}

		private static void OnTextPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			ToolTip toolTip = d as ToolTip;
			if (toolTip._toolTipTextBlock != null)
			{
				toolTip._toolTipTextBlock.Text = (string)e.NewValue;
			}
			if (toolTip.Chart != null)
			{
				toolTip.MaxWidth = toolTip.Chart.ActualWidth;
				if (toolTip._toolTipTextBlock != null)
				{
					toolTip._toolTipTextBlock.MaxWidth = Math.Max(0.0, toolTip.Chart.ActualWidth - 4.0);
				}
			}
		}

		private static void OnFontColorPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
		{
			ToolTip toolTip = d as ToolTip;
			toolTip._isAutoGeneratedFontColor = false;
			if (toolTip._toolTipTextBlock != null)
			{
				toolTip._toolTipTextBlock.Foreground = (Brush)e.NewValue;
			}
		}

		internal void Show()
		{
			if (!this.Enabled.Value)
			{
				this.Hide();
				return;
			}
			if (this.Text == string.Empty)
			{
				this.Hide();
				return;
			}
			base.Visibility = Visibility.Visible;
		}

		internal void Hide()
		{
			base.Visibility = Visibility.Collapsed;
		}
	}
}
